-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS administracion.permisos
(
    id_permiso integer NOT NULL DEFAULT nextval('administracion.permisos_permiso_id_seq'::regclass),
    nombre character varying COLLATE pg_catalog."default" NOT NULL,
    estado_permiso boolean NOT NULL,
    CONSTRAINT pk_permiso PRIMARY KEY (id_permiso)
);

CREATE TABLE IF NOT EXISTS administracion.roles
(
    id_rol integer NOT NULL DEFAULT nextval('administracion.roles_rol_id_seq'::regclass),
    nombre character varying COLLATE pg_catalog."default" NOT NULL,
    estado_rol boolean NOT NULL,
    CONSTRAINT pk_roles PRIMARY KEY (id_rol)
);

COMMENT ON COLUMN administracion.roles.id_rol
    IS 'pk de la tabla roles';
COMMENT ON CONSTRAINT pk_roles ON administracion.roles
    IS 'pk tabla roles';

CREATE TABLE IF NOT EXISTS administracion.roles_permisos
(
    id integer NOT NULL DEFAULT nextval('administracion.roles_permisos_id_seq'::regclass),
    rol_id integer NOT NULL,
    permiso_id integer,
    CONSTRAINT pk_roles_permisos PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS administracion.roles_usuarios
(
    id integer NOT NULL DEFAULT nextval('administracion.roles_usuarios_id_seq'::regclass),
    rol_id integer NOT NULL,
    usuario_id integer NOT NULL,
    CONSTRAINT roles_usuarios_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS administracion.usuarios
(
    id_usuario integer NOT NULL DEFAULT nextval('administracion.usuarios_usuario_id_seq'::regclass),
    usuario_nombre character varying COLLATE pg_catalog."default" NOT NULL,
    usuario_email character varying COLLATE pg_catalog."default" NOT NULL,
    password character varying COLLATE pg_catalog."default" NOT NULL,
    fecha_creacion date NOT NULL DEFAULT CURRENT_TIMESTAMP,
    estado_activacion boolean NOT NULL DEFAULT false,
    fecha_modificacion date NOT NULL DEFAULT CURRENT_TIMESTAMP,
    nombre1 character varying COLLATE pg_catalog."default",
    nombre2 character varying COLLATE pg_catalog."default",
    apellido1 character varying COLLATE pg_catalog."default",
    apellido2 character varying COLLATE pg_catalog."default",
    tipo_identificacion integer,
    identificacion character varying COLLATE pg_catalog."default",
    contacto character varying COLLATE pg_catalog."default",
    estado_cuenta boolean NOT NULL DEFAULT true,
    CONSTRAINT usuarios_pkey PRIMARY KEY (id_usuario)
);

CREATE TABLE IF NOT EXISTS clientes.cliente_vehiculo
(
    id integer NOT NULL DEFAULT nextval('clientes.cliente_vehiculo_id_seq'::regclass),
    id_auto integer,
    id_cliente integer NOT NULL,
    id_moto integer,
    id_bicicleta integer,
    fecha_creacion date NOT NULL DEFAULT CURRENT_TIMESTAMP,
    fecha_modificacion date NOT NULL DEFAULT CURRENT_TIMESTAMP,
    estado boolean NOT NULL,
    id_bus integer,
    id_camion integer,
    id_trailer integer,
    CONSTRAINT cliente_vehiculo_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS clientes.clientes
(
    id_cliente integer NOT NULL DEFAULT nextval('clientes.clientes_cliente_id_seq'::regclass),
    id_usuario integer NOT NULL,
    estado boolean NOT NULL,
    fecha_creacion date NOT NULL DEFAULT CURRENT_TIMESTAMP,
    fecha_modificacion date NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT clientes_pkey PRIMARY KEY (id_cliente)
);

CREATE TABLE IF NOT EXISTS empleados.empleados
(
    id_empleado integer NOT NULL DEFAULT nextval('empleados.empleados_empleado_id_seq'::regclass),
    id_usuario integer NOT NULL,
    fecha_creacion date NOT NULL DEFAULT CURRENT_TIMESTAMP,
    fecha_modificacion date NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT empleados_pkey PRIMARY KEY (id_empleado)
);

CREATE TABLE IF NOT EXISTS informacion_general.tipo_identificacion
(
    id integer NOT NULL DEFAULT nextval('informacion_general.tipo_identificacion_id_seq'::regclass),
    nombre character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT tipo_identificacion_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ordenes_generales.estado_reparacion
(
    id integer NOT NULL DEFAULT nextval('ordenes_generales.estado_reparacion_id_seq'::regclass),
    nombre character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT estado_reparacion_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ordenes_generales.orden_servicios
(
    orden_id integer NOT NULL DEFAULT nextval('ordenes_generales.orden_servicios_orden_id_seq'::regclass),
    cliente_id integer NOT NULL,
    empleado_id integer NOT NULL,
    cliente_vehiculo_id integer NOT NULL,
    fecha_creacion date NOT NULL DEFAULT CURRENT_TIMESTAMP,
    fecha_entrega date NOT NULL DEFAULT CURRENT_TIMESTAMP,
    estado_reparacion integer NOT NULL,
    calificacion_empleado numeric(1, 0),
    calificacion_cliente numeric(1, 0),
    estado_orden boolean NOT NULL DEFAULT false,
    CONSTRAINT orden_servicios_pkey PRIMARY KEY (orden_id)
);

CREATE TABLE IF NOT EXISTS vehiculos.autos
(
    id_vehiculo integer NOT NULL DEFAULT nextval('vehiculos.vehiculos_vehiculo_id_seq'::regclass),
    marca character varying COLLATE pg_catalog."default" NOT NULL,
    placa character varying COLLATE pg_catalog."default" NOT NULL,
    color character varying COLLATE pg_catalog."default" NOT NULL,
    modelo character varying COLLATE pg_catalog."default" NOT NULL,
    estado boolean NOT NULL DEFAULT true,
    CONSTRAINT vehiculos_pkey PRIMARY KEY (id_vehiculo)
);

CREATE TABLE IF NOT EXISTS vehiculos.bicicletas
(
    id_bicicleta integer NOT NULL DEFAULT nextval('vehiculos.bicicletas_id_bicicleta_seq'::regclass),
    color character varying COLLATE pg_catalog."default" NOT NULL,
    marca character varying COLLATE pg_catalog."default" NOT NULL,
    modelo character varying COLLATE pg_catalog."default" NOT NULL,
    estado boolean NOT NULL,
    CONSTRAINT bicicleta_pk PRIMARY KEY (id_bicicleta)
);

CREATE TABLE IF NOT EXISTS vehiculos.buses
(
    id_bus integer NOT NULL DEFAULT nextval('vehiculos.buses_id_bus_seq'::regclass),
    color character(1) COLLATE pg_catalog."default" NOT NULL,
    marca character varying COLLATE pg_catalog."default" NOT NULL,
    placa character varying COLLATE pg_catalog."default" NOT NULL,
    fecha_creacion date NOT NULL DEFAULT CURRENT_TIMESTAMP,
    fecha_modificacion date NOT NULL DEFAULT CURRENT_TIMESTAMP,
    estado boolean NOT NULL DEFAULT true,
    CONSTRAINT buses_pkey PRIMARY KEY (id_bus)
);

CREATE TABLE IF NOT EXISTS vehiculos.camiones
(
    id_camion integer NOT NULL DEFAULT nextval('vehiculos.camiones_id_camion_seq'::regclass),
    color character varying COLLATE pg_catalog."default" NOT NULL,
    marca character varying COLLATE pg_catalog."default" NOT NULL,
    placa character varying COLLATE pg_catalog."default" NOT NULL,
    fecha_creacion date NOT NULL DEFAULT CURRENT_TIMESTAMP,
    fecha_modificacion date NOT NULL DEFAULT CURRENT_TIMESTAMP,
    estado boolean NOT NULL DEFAULT true,
    CONSTRAINT camiones_pkey PRIMARY KEY (id_camion)
);

CREATE TABLE IF NOT EXISTS vehiculos.motos
(
    id_moto integer NOT NULL DEFAULT nextval('vehiculos.motos_id_moto_seq'::regclass),
    color character(1) COLLATE pg_catalog."default" NOT NULL,
    marca character varying COLLATE pg_catalog."default" NOT NULL,
    placa character varying COLLATE pg_catalog."default" NOT NULL,
    estado boolean NOT NULL DEFAULT true,
    CONSTRAINT motos_pk PRIMARY KEY (id_moto)
);

CREATE TABLE IF NOT EXISTS vehiculos.trailer
(
    id_trailer integer NOT NULL DEFAULT nextval('vehiculos.trailer_id_trailer_seq'::regclass),
    color character varying COLLATE pg_catalog."default" NOT NULL,
    marca character varying COLLATE pg_catalog."default" NOT NULL,
    placa character varying COLLATE pg_catalog."default" NOT NULL,
    fecha_creacion date NOT NULL DEFAULT CURRENT_TIMESTAMP,
    fecha_modificacion date NOT NULL DEFAULT CURRENT_TIMESTAMP,
    estado boolean NOT NULL,
    CONSTRAINT trailer_pkey PRIMARY KEY (id_trailer)
);

ALTER TABLE IF EXISTS administracion.roles_permisos
    ADD CONSTRAINT fk_permiso_id FOREIGN KEY (permiso_id)
    REFERENCES administracion.permisos (id_permiso) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS administracion.roles_permisos
    ADD CONSTRAINT fk_roles FOREIGN KEY (rol_id)
    REFERENCES administracion.roles (id_rol) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS administracion.roles_usuarios
    ADD CONSTRAINT fk_role FOREIGN KEY (rol_id)
    REFERENCES administracion.roles (id_rol) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS administracion.roles_usuarios
    ADD CONSTRAINT fk_usuario FOREIGN KEY (usuario_id)
    REFERENCES administracion.usuarios (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS administracion.usuarios
    ADD CONSTRAINT fk_tipo_identificacion FOREIGN KEY (tipo_identificacion)
    REFERENCES informacion_general.tipo_identificacion (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS clientes.cliente_vehiculo
    ADD CONSTRAINT cliente_vehiculo_cliente_id_fkey FOREIGN KEY (id_cliente)
    REFERENCES clientes.clientes (id_cliente) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS clientes.cliente_vehiculo
    ADD CONSTRAINT cliente_vehiculo_id_bicicleta_fkey FOREIGN KEY (id_bicicleta)
    REFERENCES vehiculos.bicicletas (id_bicicleta) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS clientes.cliente_vehiculo
    ADD CONSTRAINT cliente_vehiculo_id_bus_fkey FOREIGN KEY (id_bus)
    REFERENCES vehiculos.buses (id_bus) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS clientes.cliente_vehiculo
    ADD CONSTRAINT cliente_vehiculo_id_camion_fkey FOREIGN KEY (id_camion)
    REFERENCES vehiculos.camiones (id_camion) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS clientes.cliente_vehiculo
    ADD CONSTRAINT cliente_vehiculo_id_moto_fkey FOREIGN KEY (id_moto)
    REFERENCES vehiculos.motos (id_moto) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS clientes.cliente_vehiculo
    ADD CONSTRAINT cliente_vehiculo_id_trailer_fkey FOREIGN KEY (id_trailer)
    REFERENCES vehiculos.trailer (id_trailer) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS clientes.cliente_vehiculo
    ADD CONSTRAINT cliente_vehiculo_id_vehiculo_fkey FOREIGN KEY (id_auto)
    REFERENCES vehiculos.autos (id_vehiculo) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS clientes.clientes
    ADD CONSTRAINT fk_usuario FOREIGN KEY (id_usuario)
    REFERENCES administracion.usuarios (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS empleados.empleados
    ADD CONSTRAINT fk_usuario FOREIGN KEY (id_usuario)
    REFERENCES administracion.usuarios (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS ordenes_generales.orden_servicios
    ADD CONSTRAINT orden_servicios_cliente_id_fkey FOREIGN KEY (cliente_id)
    REFERENCES clientes.clientes (id_cliente) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS ordenes_generales.orden_servicios
    ADD CONSTRAINT orden_servicios_cliente_vehiculo_id_fkey FOREIGN KEY (cliente_vehiculo_id)
    REFERENCES clientes.cliente_vehiculo (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS ordenes_generales.orden_servicios
    ADD CONSTRAINT orden_servicios_empleado_id_fkey FOREIGN KEY (empleado_id)
    REFERENCES empleados.empleados (id_empleado) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS ordenes_generales.orden_servicios
    ADD CONSTRAINT orden_servicios_estado_reparacion_fkey FOREIGN KEY (estado_reparacion)
    REFERENCES ordenes_generales.estado_reparacion (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;